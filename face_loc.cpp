/**
* Locate face and save the extracted face(*.jpg) to ./detected_face/
* Using .txt file generated by dataset.py and save corresponding txt
* in ./face_detection/.
* See README.md for details.
*/

#include "opencv2/opencv.hpp"
#include "FaceLocationInterface.h"
#include <fstream>
#include <string>

#include "glog/logging.h"


using std::string;

/**
* @brief Return dirpath and basename of a path.
*/
int splitFilename(const string& str, string& dir, string& base) {
	std::size_t found = str.find_last_of("/\\");
	if (found != string::npos) {
		dir = str.substr(0, found);
		base = str.substr(found + 1);
		return 0;
	}
	else {
		return -1;
	}

}

int face_detection() {
	
	// google::InitGoogleLogging("FaceLocationGlog");
	// LOG(INFO) << "Initialize Face location lib.";
	// int InitializeFaceLib(double dConfidence, int nDevType=0, int nProcessIdx=0)
	// dConfidence: confidence
	// nDevType: GPU Server
	// nProcessIdx: assign GPU according to PID ??
	printf("Initialize face location lib.\n");
	InitializeFaceLib(0.3, 2, 0);
	// txt file, save img path and location coordination
	string sFilePath = ".\\dataset\\img_list.txt";  
	string sLocFilePath = ".\\dateset\\face_loc_list.txt";
	
	string strPath = "";
	string dirName = "";
	string baseName = "";

	std::fstream fImg(sFilePath.c_str(), std::ios::in);
	std::fstream fFaceLoc(sLocFilePath.c_str(), std::ios::out);
	VEC_FACERECTINFO vecRlt;

	cv::Mat srcMat, dstMat;
	IplImage qImg;

	// location information
	int x, y, width, height;
	cv::Rect faceRect;
	if (fImg.good()) {
		while (std::getline(fImg, strPath)) {
			// readin img
			srcMat = cv::imread(strPath);
			printf("%s", strPath.c_str());
			// get img path
			splitFilename(strPath, dirName, baseName);
			// location
			qImg = IplImage(dstMat);
			LocationFace((unsigned char*)qImg.imageData, qImg.width, qImg.height, EImgType_Rgb24, 1, vecRlt);

			for (int n = 0; n<vecRlt.size(); n++) {
				SFaceRectInfo sInfo = vecRlt[n];
				x = sInfo.nX;
				y = sInfo.nY;
				width = sInfo.nWidth;
				height = sInfo.nHeight;

				// Use opencv to save image in the location rectangle.
				faceRect = cv::Rect(x, y, width, height);
				cv::Mat locatedFace;
				srcMat(faceRect).copyTo(locatedFace);
				cv::imwrite(string(".\\dataset\\detected_face\\") +
					baseName.substr(baseName.length() - 4) +
					std::to_string(n) +
					string(".jpg"), locatedFace);

				fFaceLoc << std::to_string(x) + string(" ")\
					<< std::to_string(y) + string(" ")\
					<< std::to_string(width) + string(" ")\
					<< std::to_string(height) + string(" ")\
					<< std::endl;
			}
		}
	}
}